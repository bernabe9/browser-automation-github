service: browser-automation-github

provider:
  name: aws
  profile: default
  runtime: nodejs8.10
  environment:
    CHECKS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-checks
    GITHUB_TOKEN: ${ssm:github-token}
    NAMESPACE: Browser Automation
    WEB_URL: http://browser-automation-dev.s3-website-us-east-1.amazonaws.com
    LAMBDA_URL: https://5mge3matzj.execute-api.us-east-1.amazonaws.com/dev
    POST_DEPLOY_DELAY: 10
    SQS_QUEUE_URL: https://sqs.#{AWS::Region}.amazonaws.com/#{AWS::AccountId}/queue
    CONCURRENCY: 3
    REVIEW_APP_SUITE_ID: feed4fa0-5f92-11e9-a1cb-c5176492666a
    GW_URL:
      Fn::Join:
        - ''
        - - 'https://'
          - Ref: 'ApiGatewayRestApi'
          - '.execute-api.#{AWS::Region}.amazonaws.com/${self:provider.stage}'
  iamRoleStatements:
    - Effect: 'Allow'
      Resource: '*'
      Action:
        - 'sqs:*'
    - Effect: Allow
      Resource: '*'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem

plugins:
  - serverless-offline
  - serverless-pseudo-parameters

functions:
  handler:
    handler: lambdas/handler.handler
    events:
      - http:
          path: webhook
          method: post
          cors: true

  heroku-handler:
    handler: lambdas/heroku-handler.handler
    events:
      - http:
          path: heroku-webhook
          method: post
          cors: true

  status-handler:
    handler: lambdas/status-handler.handler
    events:
      - http:
          path: status-webhook
          method: post
          cors: true

  trigger:
    handler: lambdas/trigger.trigger
    events:
      - sqs:
          arn: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:queue
          batchSize: 1

resources:
  Resources:
    ChecksTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: sha
            AttributeType: S
          - AttributeName: url
            AttributeType: S
        KeySchema:
          - AttributeName: sha
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: urlIndex
            KeySchema:
              - AttributeName: url
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.CHECKS_TABLE}
    queue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: 'queue'
